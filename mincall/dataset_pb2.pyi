# @generated by generate_proto_mypy_stubs.py.  Do not edit!
from typing import (
    Iterable,
    List,
    cast,
    Tuple,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
)

class BasePair(int):
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> int: ...
    @classmethod
    def keys(cls) -> List[str]: ...
    @classmethod
    def values(cls) -> List[int]: ...
    @classmethod
    def items(cls) -> List[Tuple[str, int]]: ...
A = cast(BasePair, 0)
C = cast(BasePair, 1)
G = cast(BasePair, 2)
T = cast(BasePair, 3)
BLANK = cast(BasePair, 4)

class Cigar(int):
    @classmethod
    def Name(cls, number: int) -> str: ...
    @classmethod
    def Value(cls, name: str) -> int: ...
    @classmethod
    def keys(cls) -> List[str]: ...
    @classmethod
    def values(cls) -> List[int]: ...
    @classmethod
    def items(cls) -> List[Tuple[str, int]]: ...
MATCH = cast(Cigar, 0)
MISMATCH = cast(Cigar, 1)
INSERTION = cast(Cigar, 2)
DELETION = cast(Cigar, 3)

class DataPoint(Message):
    signal = ... # type: RepeatedScalarFieldContainer[float]
    basecalled = ... # type: RepeatedScalarFieldContainer[BasePair]
    lower_bound = ... # type: RepeatedScalarFieldContainer[int]
    cigar = ... # type: RepeatedScalarFieldContainer[Cigar]
    aligned_ref = ... # type: RepeatedScalarFieldContainer[BasePair]
    aligned_ref_squiggle = ... # type: RepeatedScalarFieldContainer[BasePair]
    basecalled_squiggle = ... # type: RepeatedScalarFieldContainer[BasePair]
    
    def __init__(self,
        signal : Iterable[float] = None,
        basecalled : Iterable[BasePair] = None,
        lower_bound : Iterable[int] = None,
        cigar : Iterable[Cigar] = None,
        aligned_ref : Iterable[BasePair] = None,
        aligned_ref_squiggle : Iterable[BasePair] = None,
        basecalled_squiggle : Iterable[BasePair] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> DataPoint: ...
    def MergeFrom(self, other_msg: Message) -> None: ...
    def CopyFrom(self, other_msg: Message) -> None: ...
